name: DevSecOps Azure VM Workflow

on:
  workflow_dispatch:

env:
  RESOURCE_GROUP: vm-devsecops-rg
  KEYVAULT_NAME: ntmsdevsecops-kv
  LOCATION: centralIndia
  SA: ntmsla1group9185

jobs:
  code-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

  terraform-deploy:
    needs: code-scan
    runs-on: ubuntu-latest
    outputs:
      vm_ip: ${{ steps.output_ip.outputs.vm_ip }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Create Resource Group (Idempotent)
        run: |
          az group show --name $RESOURCE_GROUP || az group create --name $RESOURCE_GROUP --location $LOCATION
      - name: Create Key Vault (Idempotent)
        run: |
          az keyvault show --name $KEYVAULT_NAME --resource-group $RESOURCE_GROUP || \
          az keyvault create --name $KEYVAULT_NAME --resource-group $RESOURCE_GROUP --location $LOCATION
      - name: Set Key Vault Secret (Idempotent)
        run: |
          az keyvault secret show --vault-name $KEYVAULT_NAME --name webvm-password || \
          az keyvault secret set --vault-name $KEYVAULT_NAME --name webvm-password --value ${{ secrets.VM_PASSWORD }}
      - name: Terraform Init with Remote Backend
        working-directory: ./infra
        run: terraform init -backend-config="resource_group_name=ntmsla1_group" -backend-config="storage_account_name=ntmsla1group9185" -backend-config="container_name=tfstate" -backend-config="key=terraform.tfstate"


      - name: Terraform Apply
        working-directory: ./infra
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        run: |
          terraform apply -auto-approve \
            -var "resource_group_name=$RESOURCE_GROUP" \
            -var "storage_account_name=$SA" \
            -var "keyvault_name=$KEYVAULT_NAME" \
            -var "location=$LOCATION"
      - name: Output Public IP
        id: output_ip
        working-directory: ./infra
        run: |
          vm_ip=$(terraform output -raw public_ip)
          echo "VM IP is: $vm_ip"
          echo "vm_ip=$vm_ip" >> $GITHUB_OUTPUT
  deploy-web-app:
    needs: terraform-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get VM Password from Key Vault
        id: kv
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ env.KEYVAULT_NAME }}
          secrets: webvm-password
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install and Configure NGINX
        run: |
         sshpass -p "${{ steps.kv.outputs.webvm-password }}" ssh -o StrictHostKeyChecking=no vmadmin@${{ needs.terraform-deploy.outputs.vm_ip }} <<'EOF'
          sudo apt-get update -y
          sudo apt-get install nginx -y
          sudo systemctl enable nginx
          sudo ufw allow 80
          sudo ufw allow 22
          sudo ufw --force enable
         EOF
      - name: Create Target Folder on VM
        run: |
          sshpass -p "${{ steps.kv.outputs.webvm-password }}" ssh -o StrictHostKeyChecking=no vmadmin@${{ needs.terraform-deploy.outputs.vm_ip }} "mkdir -p /tmp/site"
      - name: Upload Website Files (flattened)
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ needs.terraform-deploy.outputs.vm_ip }}
          username: vmadmin
          password: ${{ steps.kv.outputs.webvm-password }}
          source: "./app/*"
          target: "/tmp/site"

      - name: Deploy Files to NGINX Root
        run: |
          sshpass -p "${{ steps.kv.outputs.webvm-password }}" ssh -o StrictHostKeyChecking=no vmadmin@${{ needs.terraform-deploy.outputs.vm_ip }} "\
            sudo rm -rf /var/www/html/* && \
            sudo cp -r /tmp/site/app/* /var/www/html/ && \
            sudo chown -R www-data:www-data /var/www/html && \
            sudo chmod -R 755 /var/www/html \
          "
      - name: Restart NGINX
        run: |
          sshpass -p "${{ steps.kv.outputs.webvm-password }}" ssh -o StrictHostKeyChecking=no vmadmin@${{ needs.terraform-deploy.outputs.vm_ip }} "sudo systemctl restart nginx" 
  owasp-scan: 
    needs: deploy-web-app
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get VM Public IP from Azure
        id: get_ip
        run: |
         ip=$(az vm list-ip-addresses \
         --resource-group $RESOURCE_GROUP \
         --name webvm \
         --query "[0].virtualMachine.network.publicIpAddresses[0].ipAddress" \
         -o tsv)
         echo "vm_ip=$ip" >> $GITHUB_OUTPUT

      - name: Run OWASP ZAP Baseline Scan in Docker
        run: |
          mkdir -p reports
          timestamp=$(date '+%Y-%m-%d-%H-%M-%S')
          report_file="owasp-scan-report-$timestamp.html"
          target_url="http://${{ steps.get_ip.outputs.vm_ip }}"
          echo "Running ZAP scan against: $target_url"
          docker run --rm --user root \
            -v $(pwd)/reports:/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t "$target_url" \
            -r "$report_file" || true
          if [ -f "reports/$report_file" ]; then
            echo "Report generated: reports/$report_file"
            echo "REPORT_FILE=reports/$report_file" >> $GITHUB_ENV
          else
            echo "No report generated. Skipping upload."
            echo "REPORT_FILE=" >> $GITHUB_ENV
          fi
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upload OWASP report to Azure Blob
        if: env.REPORT_FILE != ''
        run: |
          az storage blob upload \
            --account-name $SA \
            --container-name reports \
            --file "$REPORT_FILE" \
            --name "$(basename "$REPORT_FILE")" \
            --auth-mode login
        env:
          SA: ntmsla1group9185
          REPORT_FILE: ${{ env.REPORT_FILE }}
