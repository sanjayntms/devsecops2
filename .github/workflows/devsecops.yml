name: DevSecOps Azure VM Workflow

on:
  workflow_dispatch:

env:
  RESOURCE_GROUP: vm-devsecops-rg
  KEYVAULT_NAME: ntmsdevsecops-kv
  LOCATION: centralIndia
  SA: ntmsla1group9185


jobs:
  code-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

  #     - name: Run Checkov (Terraform Security Scan)
  #       uses: bridgecrewio/checkov-action@v12
  #       with:
  #         directory: ./infra

  terraform-deploy:
    needs: code-scan
    runs-on: ubuntu-latest
    outputs:
      vm_ip: ${{ steps.output_ip.outputs.vm_ip }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Create Resource Group (Idempotent)
        run: |
          az group show --name $RESOURCE_GROUP || az group create --name $RESOURCE_GROUP --location $LOCATION

      - name: Create Key Vault (Idempotent)
        run: |
          az keyvault show --name $KEYVAULT_NAME --resource-group $RESOURCE_GROUP || \
          az keyvault create --name $KEYVAULT_NAME --resource-group $RESOURCE_GROUP --location $LOCATION

      - name: Set Key Vault Secret (Idempotent)
        run: |
          az keyvault secret show --vault-name $KEYVAULT_NAME --name webvm-password || \
          az keyvault secret set --vault-name $KEYVAULT_NAME --name webvm-password --value ${{ secrets.VM_PASSWORD }}

      - name: Terraform Init with Remote Backend
        working-directory: ./infra
        run: terraform init -backend-config="resource_group_name=ntmsla1_group" -backend-config="storage_account_name=ntmsla1group9185" -backend-config="container_name=tfstate" -backend-config="key=terraform.tfstate"

      - name: Terraform Apply
        working-directory: ./infra
        env:
           ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
           ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
           ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
           ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        run: |
          terraform apply -auto-approve \
          -var "resource_group_name=$RESOURCE_GROUP" \
          -var "storage_account_name=$STORAGE_ACCOUNT" \
          -var "keyvault_name=$KEYVAULT_NAME" \
          -var "location=$LOCATION"


      - name: Output Public IP
        id: output_ip
        working-directory: ./infra
        run: |
          echo "vm_ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT

  deploy-web-app:
    needs: terraform-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get VM Password from Key Vault
        id: kv
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ env.KEYVAULT_NAME }}
          secrets: webvm-password
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Target Folder on VM
        run: |
          sshpass -p "${{ steps.kv.outputs.webvm-password }}" ssh -o StrictHostKeyChecking=no vmadmin@${{ needs.terraform-deploy.outputs.vm_ip }} "mkdir -p /tmp/site"

      - name: Upload Web Site
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ needs.terraform-deploy.outputs.vm_ip }}
          username: vmadmin
          password: ${{ steps.kv.outputs.webvm-password }}
          source: "./app/*"
          target: "/tmp/site"

      - name: Restart NGINX
        run: |
          sshpass -p "${{ steps.kv.outputs.webvm-password }}" ssh -o StrictHostKeyChecking=no vmadmin@${{ needs.terraform-deploy.outputs.vm_ip }} "sudo systemctl restart nginx"

  owasp-scan:
    needs: deploy-web-app
    runs-on: ubuntu-latest
    steps:
      - name: Install OWASP ZAP CLI
        run: |
          sudo apt-get update && sudo apt-get install -y snapd
          sudo snap install zaproxy --classic

      - name: Run OWASP ZAP Baseline Scan
        run: |
          timestamp=$(date '+%Y-%m-%d-%H-%M-%S')
          mkdir -p reports
          zaproxy -cmd -quickurl http://${{ needs.terraform-deploy.outputs.vm_ip }} -quickout reports/owasp-scan-report-$timestamp.html

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upload Report to Azure Storage
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            timestamp=$(date '+%Y-%m-%d-%H-%M-%S')
            az storage blob upload \
              --account-name ntmsla1group9185  \
              --container-name reports \
              --file reports/owasp-scan-report-$timestamp.html \
              --name owasp-scan-report-$timestamp.html \
              --auth-mode key \
              --account-key ${{ secrets.STORAGE_KEY }}
